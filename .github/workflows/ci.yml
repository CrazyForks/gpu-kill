name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  RUST_BACKTRACE: 1
  RUST_LOG: info
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 2
  CARGO_HTTP_TIMEOUT: 30

jobs:
  # Standard CI tests (no GPU hardware required)
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # Prevent long-running jobs
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        include:
          - os: ubuntu-22.04
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y build-essential libssl-dev pkg-config
          - os: macos-13
            install_deps: |
              xcode-select --install || true
          - os: windows-2022
            install_deps: |
              # Windows dependencies handled by vcpkg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: ${{ matrix.install_deps }}

      - name: Show system resources (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== System Resources ==="
          df -h
          echo "=== CPU Info ==="
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            nproc
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            sysctl -n hw.ncpu
          fi
          echo "=== Memory Info ==="
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            free -h
            cat /proc/meminfo | head -5
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            vm_stat
            system_profiler SPHardwareDataType | grep "Memory:"
          fi

      - name: Show system resources (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo === System Resources ===
          dir C:\
          echo === CPU Info ===
          echo %NUMBER_OF_PROCESSORS% processors
          echo === Memory Info ===
          systeminfo | findstr "Total Physical Memory"

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run unit tests
        run: |
          cargo test --features mock_nvml --jobs 2
          cargo test --no-default-features --jobs 2

      - name: Run integration tests
        run: cargo test --test integration_tests --jobs 2

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings --jobs 2

      - name: Run fmt
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build --release --jobs 2

      - name: Test basic functionality
        run: |
          ./target/release/gpukill --version
          ./target/release/gpukill --help

  # Security and compliance
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo binaries
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bin-

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          # Install cargo-audit with caching
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Security audit
        run: cargo audit

      - name: Build with security flags
        run: |
          RUSTFLAGS="-C target-cpu=native" cargo build --release
          strip target/release/gpukill

  # Documentation and API tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config

      - name: Test MCP server build
        run: cargo build --release -p gpukill-mcp

      - name: Test HTTP server build
        run: cargo build --release

      - name: Test dashboard build
        run: |
          cd dashboard
          npm install
          npm run build

  # Cross-compilation tests using cargo-cross (proper solution)
  cross-compile:
    name: Cross-Compile (${{ matrix.target }})
    runs-on: ubuntu-22.04
    timeout-minutes: 45  # Cross-compilation takes longer
    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

            - name: Install cross-compilation tools
              run: |
                # Install cargo-cross for proper cross-compilation
                cargo install cross --git https://github.com/cross-rs/cross
                
                # Install target-specific tools
                rustup target add ${{ matrix.target }}
                
                # Install system dependencies for cross-compilation
                sudo apt-get update
                sudo apt-get install -y build-essential libssl-dev pkg-config
                
                # Install additional tools for specific targets
                if [[ "${{ matrix.target }}" == *"windows"* ]]; then
                  sudo apt-get install -y gcc-mingw-w64-x86-64
                elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
                  sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64
                  # Enable ARM64 architecture
                  sudo dpkg --add-architecture arm64
                  sudo apt-get update
                fi

      - name: Cross-compile
        env:
          # Set up OpenSSL environment variables for cross-compilation
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu' || '/usr' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu/include' || '/usr/include/openssl' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu/lib' || '/usr/lib/x86_64-linux-gnu' }}
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/aarch64-linux-gnu/lib/pkgconfig' || '/usr/lib/x86_64-linux-gnu/pkgconfig' }}
          # Allow cross-compilation
          PKG_CONFIG_ALLOW_CROSS: 1
          # Set linker for ARM64
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
        run: |
          # Use cross for reliable cross-compilation
          cross build --release --target ${{ matrix.target }}
          
          # Verify the binary was created
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            ls -la target/${{ matrix.target }}/release/gpukill.exe
          else
            ls -la target/${{ matrix.target }}/release/gpukill
          fi

  # macOS compilation (native, not cross-compiled)
  macos-compile:
    name: macOS Compile
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          # Install Xcode command line tools if not present
          xcode-select --install || true
          
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for macOS
        run: |
          cargo build --release --jobs 2
          
      - name: Verify macOS binary
        run: |
          ls -la target/release/gpukill
          file target/release/gpukill
          ./target/release/gpukill --version