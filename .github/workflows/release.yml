name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.1)'
        required: true
        type: string

permissions:
  contents: write

env:
  TAG: ${{ github.ref_type == 'tag' && github.ref_name || inputs.tag }}

jobs:
  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Install musl tools
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-musl
      - name: Prepare artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/gpukill dist/gpukill-${{ env.TAG }}-linux-x86_64
      - uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: dist/gpukill-${{ env.TAG }}-linux-x86_64

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build
        run: cargo build --release
      - name: Prepare artifact
        run: |
          mkdir -p dist
          cp target/release/gpukill dist/gpukill-${{ env.TAG }}-macos-aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64
          path: dist/gpukill-${{ env.TAG }}-macos-aarch64

  build-windows-x86_64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build
        run: cargo build --release
      - name: Prepare zip
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target/release/gpukill.exe dist/gpukill.exe
          Compress-Archive -Path dist/gpukill.exe -DestinationPath dist/gpukill-${{ env.TAG }}-windows-x86_64.zip -Force
      - uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: dist/gpukill-${{ env.TAG }}-windows-x86_64.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux-x86_64, build-macos-arm64, build-windows-x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Flatten artifacts and compute checksums
        run: |
          mkdir -p upload
          find dist -type f -maxdepth 2 -exec cp {} upload/ \;
          (cd upload && sha256sum * > SHA256SUMS) || (cd upload && shasum -a 256 * > SHA256SUMS)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: |
            upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install cargo-dist
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/latest/download/cargo-dist-installer.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run cargo-dist
        run: cargo dist init --tag=${{ github.ref_name }} --no-upload

      - name: Build artifacts
        run: cargo dist build --tag=${{ github.ref_name }} --no-upload

      - name: Upload artifacts to release
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.tar.gz dist/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnvidia-ml-dev

      - name: Run tests
        run: |
          cargo test --features mock_nvml
          cargo test --no-default-features

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run fmt
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build --release

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
