name: GPU Hardware Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      gpu_vendor:
        description: 'GPU vendor to test'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - nvidia
          - amd
          - intel
          - apple

permissions:
  contents: read

env:
  RUST_BACKTRACE: 1
  RUST_LOG: info

jobs:
  # Test on self-hosted runners with actual GPU hardware
  gpu-hardware-tests:
    name: GPU Hardware Tests (${{ matrix.vendor }})
    runs-on: [self-hosted, gpu, ${{ matrix.vendor }}]
    if: false  # Disabled until self-hosted runners are set up
    
    strategy:
      fail-fast: false
      matrix:
        vendor: [nvidia, amd, intel, apple]
        include:
          - vendor: nvidia
            os: ubuntu-22.04
            gpu_driver: nvidia-driver-535
            test_commands:
              - nvidia-smi
              - nvidia-ml-py3
          - vendor: amd
            os: ubuntu-22.04
            gpu_driver: rocm-dev
            test_commands:
              - rocm-smi
              - rocminfo
          - vendor: intel
            os: ubuntu-22.04
            gpu_driver: intel-gpu-tools
            test_commands:
              - intel_gpu_top
              - intel_gpu_time
          - vendor: apple
            os: macos-13
            gpu_driver: xcode-select
            test_commands:
              - system_profiler SPDisplaysDataType

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.vendor }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          case "${{ matrix.vendor }}" in
            nvidia)
              sudo apt-get update
              sudo apt-get install -y build-essential libssl-dev pkg-config
              # Verify NVIDIA driver
              nvidia-smi || (echo "NVIDIA driver not working" && exit 1)
              ;;
            amd)
              sudo apt-get update
              sudo apt-get install -y build-essential libssl-dev pkg-config
              # Verify ROCm installation
              rocm-smi || (echo "ROCm not working" && exit 1)
              rocminfo || (echo "ROCm info not available" && exit 1)
              ;;
            intel)
              sudo apt-get update
              sudo apt-get install -y build-essential libssl-dev pkg-config intel-gpu-tools
              # Verify Intel GPU tools
              intel_gpu_top --help || (echo "Intel GPU tools not working" && exit 1)
              ;;
            apple)
              # Install Xcode command line tools
              xcode-select --install || true
              # Verify Apple Silicon GPU
              system_profiler SPDisplaysDataType | grep -i "chip\|gpu" || (echo "Apple GPU not detected" && exit 1)
              ;;
          esac

      - name: Build and test
        run: |
          # Build the project
          cargo build --release
          
          # Run unit tests
          cargo test --features mock_nvml
          
          # Run integration tests
          cargo test --test integration_tests

      - name: Test GPU detection
        run: |
          # Test basic GPU listing
          ./target/release/gpukill --list --vendor ${{ matrix.vendor }}
          
          # Test with details
          ./target/release/gpukill --list --details --vendor ${{ matrix.vendor }}
          
          # Test JSON output
          ./target/release/gpukill --list --output json --vendor ${{ matrix.vendor }}

      - name: Test GPU operations (safe)
        run: |
          # Test help commands
          ./target/release/gpukill --help
          ./target/release/gpukill --list --help
          ./target/release/gpukill --kill --help
          ./target/release/gpukill --reset --help
          
          # Test version
          ./target/release/gpukill --version
          
          # Test audit functionality (safe)
          ./target/release/gpukill --audit --rogue-config

      - name: Performance benchmark
        run: |
          # Benchmark GPU listing performance
          time ./target/release/gpukill --list --vendor ${{ matrix.vendor }}
          
          # Benchmark with details
          time ./target/release/gpukill --list --details --vendor ${{ matrix.vendor }}

      - name: Memory usage test
        run: |
          # Test memory usage during operation
          valgrind --tool=massif --massif-out-file=massif.out ./target/release/gpukill --list --vendor ${{ matrix.vendor }} || true
          
          # Check for memory leaks
          valgrind --leak-check=full --show-leak-kinds=all ./target/release/gpukill --list --vendor ${{ matrix.vendor }} || true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gpu-test-results-${{ matrix.vendor }}
          path: |
            massif.out
            target/release/gpukill
          retention-days: 7

  # Cross-platform compatibility tests
  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        include:
          - os: ubuntu-22.04
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y build-essential libssl-dev pkg-config
          - os: macos-13
            install_deps: |
              xcode-select --install || true
          - os: windows-2022
            install_deps: |
              # Windows dependencies handled by vcpkg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: ${{ matrix.install_deps }}

      - name: Build and test
        run: |
          cargo build --release
          cargo test --features mock_nvml
          cargo clippy --all-targets --all-features -- -D warnings
          cargo fmt --all -- --check

  # Stress testing on GPU hardware
  gpu-stress-tests:
    name: GPU Stress Tests
    runs-on: [self-hosted, gpu, stress-test]
    if: false  # Disabled until self-hosted runners are set up
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release version
        run: cargo build --release

      - name: Stress test GPU listing
        run: |
          # Run GPU listing 100 times to test stability
          for i in {1..100}; do
            echo "Iteration $i"
            ./target/release/gpukill --list --details
            sleep 1
          done

      - name: Concurrent access test
        run: |
          # Test concurrent GPU access
          for i in {1..10}; do
            ./target/release/gpukill --list --output json &
          done
          wait

      - name: Long-running test
        run: |
          # Test long-running operations
          timeout 300 ./target/release/gpukill --list --watch || true

  # Security and compliance tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
          cargo install cargo-audit
          cargo install cargo-deny

      - name: Security audit
        run: |
          cargo audit
          cargo deny check

      - name: Build with security flags
        run: |
          RUSTFLAGS="-C target-cpu=native" cargo build --release
          strip target/release/gpukill

  # Documentation and API tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config

      - name: Test MCP server
        run: |
          cargo build --release -p gpukill-mcp
          # Test MCP server startup
          timeout 10 ./target/release/gpukill-mcp || true

      - name: Test HTTP server
        run: |
          cargo build --release
          # Test HTTP server startup
          timeout 10 ./target/release/gpukill --server --server-port 8080 || true

      - name: Test dashboard build
        run: |
          cd dashboard
          npm install
          npm run build
